;-*- Mode: Common-lisp; Package: ytools; Readtable: ytools; -*-
(in-package :ytools)
;;;$Id: opt.lmd,v 1.20 2005/12/30 19:32:49 dvm Exp $

;;; Copyright (C) 1976-2003 
;;;     Drew McDermott and Yale University.  All rights reserved
;;; This software is released under the terms of the Modified BSD
;;; License.  See file COPYING for details.

(declare-config-var opt-dir*)
(declare-config-var opt-bin-dir*)
;;;;(declare-config-var opt-namespace-mode*)
(declare-config-var opt-web-mode*)
(declare-config-var aserve-dir*)
(declare-config-var webserver-dir*)


(defun install-opt (start-over)
   (cond ((yt-load :lisplang :if-loaded nil :if-not-installed ':install)
	  (set-config-var opt-dir* start-over
		(prompt-for-dir-name "Type the directory Opt resides in: "))
	  (set-config-var opt-bin-dir* start-over
	        (prompt-for-dir-name
		   "Type the directory for Opt bin files (absolute or relative): "))
	  (cond ((or start-over
		     (not (boundp 'opt-web-mode*)))
		 (cond ((y-or-n-p
			   "To run in web mode, you must have ~
			    Allegroserve, and there must be a~% ~
			    directory 'webserver/' as a sibling of the ~
			    'opt/' directory.~% Do you want to be able ~
			    to run in web mode? ")
			(set-config-var aserve-dir* t
			   (prompt-for-dir-name
		               "Type the directory where Allegroserve resides: "))
			(let ((opt-dir-pn (parse-namestring opt-dir*)))
			   (set-config-var webserver-dir* t
			      (namestring
				 (merge-pathnames
				    (make-pathname
 				       :directory
				         (reverse
					    `("webserver"
					        ,@(cdr (reverse (pathname-directory
								     opt-dir-pn))))))
				    opt-dir-pn))))
			(set-config-var opt-web-mode* t t))
		       (t
			(set-config-var opt-web-mode* t nil)))))
	  (load (strings-concat opt-dir* "opt.lsy"))
	  (let ((*readtable* (intern-eval :ytools ytools-readtable* :ytools))
                #+pre-chunk (fload-compile* ':compile)
                #-pre-chunk (fload-compile-flag* ':compile))
	     (cond ((with-fload-abort
		       (intern-eval :opt
			  (fload %module/ opt) :ytools))
		    (dump-yt-config-file)
		    (better-restart-message)
		    t)
		   (t nil))))
	 (t nil)))
	
(defun load-opt ()
   (cond ((yt-load :lisplang :if-loaded nil :if-not-installed ':install)
	  (load-yt-config-file)
	  (load (string-concat opt-dir* "opt.lsy"))
;;;;	  (do-fload `(,opt-dir* opt.lsy))
	  (let ((*readtable* (intern-eval :ytools ytools-readtable* :ytools)))
	     (cond ((eq (with-fload-abort
		           (ytools-module-load (intern (symbol-name :opt)
                                                       :opt)
                                               #+pre-chunk nil))
                        'fload-aborted)
                    nil)
		   (t
                    (flet ((load-if-there (filename)
                              (cond ((probe-file filename)
                                     (load filename)))))
                       (load-if-there (concatenate 'string
                                              ytools-home-dir*
                                              "-" (short-site-name)
                                              directory-delimiter*
                                              "opt-init.lisp"))
                       (let ((config-dir-pathname
                                (pathname config-directory*)))
                          (cond ((not (equal config-dir-pathname
                                             (user-homedir-pathname)))
                                 (load-if-there
                                    (merge-pathnames
                                       "opt-init.lisp"
                                       config-dir-pathname)))))
                       (load-if-there (merge-pathnames
                                         "opt-init.lisp"
                                         (user-homedir-pathname))))
		    (list (find-package :opt)
			  *readtable*)))))
	 (t nil)))


