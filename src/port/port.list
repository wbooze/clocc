
ext.lisp
(defpackage #:port ...)
(define-condition code (error) ...)
(define-condition case-error (code) ...)
(define-condition not-implemented (code) ...)
(defmacro defsubst (name arglist &body body) ...)
(defmacro defcustom (name type init doc) ...)
(defmacro defconst (name type init doc) ...)
(defmacro mk-arr (type init &optional len) ...)
(defmacro with-gensyms ((title &rest names) &body body) ...)
(defmacro map-in (fn seq &rest seqs) ...)
(defun gc () ...)
(defun quit (&optional code) ...)
(defconst +eof+ cons (list '+eof+) ...)
(defun eof-p (stream) ...)
(defun string-tokens (string &key (start 0) end max ...)
(defun remove-plist (plist &rest keys) ...)
(defvar *lock-package-bindings* nil) ...)
(defun package-lock-bind (pack lockedp) ...)
(defun package-lock-unbind (pack) ...)
(defun get-package-lock (pack) ...)
(defun set-package-lock (pack value) ...)
(defmacro unlock-package (pack) ...)
(defmacro restore-package-lock (pack) ...)
(defmacro compose (&rest functions) ...)
(defmacro compose-safe (&rest functions) ...)
(defun compose-f (&rest functions) ...)
(defun compose-all (&rest functions) ...)

gray.lisp

net.lisp
(defun ipaddr-to-dotted (ipaddr) ...)
(defun dotted-to-ipaddr (dotted) ...)
(defun vector-to-ipaddr (vector) ...)
(defun ipaddr-to-vector (ipaddr) ...)
(defstruct hostent ...)
(defun resolve-host-ipaddr (host) ...)
(defun ipaddr-closure (address) ...)
(deftype socket () ...)
(defun open-socket (host port &optional bin) ...)
(defun set-socket-stream-format (socket format) ...)
(defun funcall-on-sock (function sock) ...)
(defun socket-host/port (sock) ...)
(defun socket-string (sock) ...)
(deftype socket-server () ...)
(defun open-socket-server (&optional port) ...)
(defun socket-accept (serv &key bin wait) ...)
(defun socket-server-close (server) ...)
(defun socket-server-host/port (server) ...)
(defun wait-for-stream (stream &optional timeout) ...)
(defun open-unix-socket (path &key (kind :stream) bin) ...)
(defun report-network-condition (cc out) ...)
(define-condition network (error) ...)
(define-condition timeout (network) ...)
(define-condition login (network) ()) ...)
(define-condition net-path (network) ()) ...)
(defstruct servent ...)
(defun socket-service-port (&optional service (protocol "tcp")) ...)

sys.lisp
(defun getenv (var) ...)
(defun finalize (obj func) ...)
(defun compiled-file-p (file-name) ...)
(defun variable-special-p (symbol) ...)
(defun variable-not-special (symbol) ...)
(defun arglist (fn) ...)
(defun class-slot-list (class &optional (all t)) ...)
(defun class-slot-initargs (class &optional (all t)) ...)
(defun structure-slots (struct) ...)
(defun structure-keyword-constructor (struct) ...)
(defun structure-boa-constructors (struct) ...)
(defun structure-copier (struct) ...)
(defun structure-predicate (struct) ...)
(defmacro defstruct (name &rest slots) ...)
(defun sysinfo (&optional (out *standard-output*)) ...)
(defconst +month-names+ (simple-array simple-string (12)) ...)
(defconst +week-days+ (simple-array simple-string (7)) ...)
(defconst +time-zones+ list ...)
(defun tz->string (tz dst &optional (long t)) ...)
(defun string->tz (obj) ...)
(defun current-time (&optional (out t)) ...)

shell.lisp
(defun run-prog (prog &rest opts &key args (wait t) &allow-other-keys) ...)
(defun pipe-output (prog &rest args) ...)
(defun pipe-input (prog &rest args) ...)
(defun close-pipe (stream) ...)
(defmacro with-open-pipe ((pipe open) &body body) ...)

proc.lisp
(defconstant +threads-p+ #+threads t #-threads nil ...)
(defun make-process (name function &rest args) ...)
(defun process-wait (whostate predicate &rest args) ...)
(defun process-wait-with-timeout (timeout whostate predicate &rest args) ...)
(defun with-timeout-f (timeout bodyf timeoutf) ...)
(defmacro with-timeout ((seconds &body timeout-forms) &body body) ...)
(defun y-or-n-p-timeout (seconds default &rest args) ...)
(defun maybe-y-or-n-p (val &rest args) ...)
(defmacro without-scheduling (&body body) ...)
(defun process-yield () ...)
(defun kill-process (process) ...)
(defun interrupt-process (process function &rest args) ...)
(defun restart-process (process) ...)
(defun process-p (object) ...)
(defun process-name (process) ...)
(defun process-active-p (process) ...)
(defun process-whostate (process) ...)
(defun process-state (process) ...)
(defun current-process () ...)
(defun all-processes () ...)
(defun show-processes (&key (stream *standard-output*)) ...)
(defun make-lock (&key name) ...)
(defun get-lock (lock) ...)
(defun giveup-lock (lock) ...)
(defmacro with-lock ((lock) &rest body) ...)

path.lisp
(defun un-unspecific (value) ...)
(defun pathname-ensure-name (path) ...)
(defun probe-directory (filename) ...)
(defun default-directory () ...)
(defun chdir (dir) ...)
(defsetf default-directory chdir "Change the current directory.") ...)
(defun mkdir (dir) ...)
(defun rmdir (dir) ...)
(defun safe-truename (path) ...)
(defun load-logical-host-def (host file &key style (verbose *load-verbose*)) ...)
(defcustom *logical-hosts-definitions* list nil ...)
(defun load-logical-host (host &key (verbose *load-verbose*)) ...)
(defun logical-host-p (word) ...)

mop.lisp
